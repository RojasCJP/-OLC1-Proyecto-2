/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,26],$V3=[1,20],$V4=[1,22],$V5=[1,23],$V6=[1,21],$V7=[1,25],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,29],$Ve=[5,21,47,49,50],$Vf=[2,5,21,25,33,43,47,49,50,61,62,63,72,74,75,76,77,78,80],$Vg=[1,52],$Vh=[1,53],$Vi=[1,49],$Vj=[1,51],$Vk=[2,5,21,25,28,33,43,47,49,50,61,62,63,72,74,75,76,77,78,80],$Vl=[33,41,68],$Vm=[1,59],$Vn=[1,66],$Vo=[1,67],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,76],$Vu=[1,77],$Vv=[2,108],$Vw=[22,28],$Vx=[1,101],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[1,105],$VC=[1,106],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,100],$VI=[21,22,28,37,38,39,40,41,42,48,56,57,58,59,60,73],$VJ=[2,5,21,25,33,35,36,43,47,49,50,51,52,53,54,61,62,63,72,74,75,76,77,78,80],$VK=[2,104],$VL=[33,35,36,51,52,53,54],$VM=[22,65],$VN=[21,22,28,37,38,39,40,41,42,48,56,57,73],$VO=[21,22,28,37,38,39,40,41,42,48,56,57,58,59,73],$VP=[1,169],$VQ=[1,170],$VR=[1,176],$VS=[21,47,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"if":7,"switch":8,"dowhile":9,"while":10,"for":11,"declaracion_variables":12,"declaracion_arreglos":13,"declaracion_listas":14,"asignacion_variables":15,"asignacion_arreglos":16,"asignacion_listas":17,"declaracion_funciones":18,"llamada_funciones":19,"actualizacion":20,"LLAVE_C":21,"P_COMA":22,"incremento":23,"decremento":24,"IF":25,"PARENTESIS_A":26,"condicion":27,"PARENTESIS_C":28,"LLAVE_A":29,"ELSE":30,"valor":31,"comparador":32,"IDENTIFICADOR":33,"booleano":34,"TRUE":35,"FALSE":36,"IGUALIGUAL":37,"DIFERENTE":38,"MENOR":39,"MENORIGUAL":40,"MAYOR":41,"MAYORIGUAL":42,"SWITCH":43,"cases":44,"case":45,"default":46,"CASE":47,"DOSPUNTOS":48,"BREAK":49,"DEFAULT":50,"ENTERO":51,"DECIMAL":52,"CADENA":53,"CARACTER":54,"operacion":55,"MAS":56,"MENOS":57,"MULTI":58,"DIVISION":59,"POTENCIA":60,"WHILE":61,"FOR":62,"DO":63,"tipo":64,"IGUAL":65,"acceso_arreglos":66,"acceso_listas":67,"CORCHETE_A":68,"CORCHETE_C":69,"NEW":70,"listado_datos":71,"LIST":72,"COMA":73,"INT":74,"DOUBLE":75,"BOOL":76,"CHAR":77,"STRING":78,"parametros":79,"VOID":80,"valores":81,"parametro":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"LLAVE_C",22:"P_COMA",25:"IF",26:"PARENTESIS_A",28:"PARENTESIS_C",29:"LLAVE_A",30:"ELSE",33:"IDENTIFICADOR",35:"TRUE",36:"FALSE",37:"IGUALIGUAL",38:"DIFERENTE",39:"MENOR",40:"MENORIGUAL",41:"MAYOR",42:"MAYORIGUAL",43:"SWITCH",47:"CASE",48:"DOSPUNTOS",49:"BREAK",50:"DEFAULT",51:"ENTERO",52:"DECIMAL",53:"CADENA",54:"CARACTER",56:"MAS",57:"MENOS",58:"MULTI",59:"DIVISION",60:"POTENCIA",61:"WHILE",62:"FOR",63:"DO",65:"IGUAL",68:"CORCHETE_A",69:"CORCHETE_C",70:"NEW",72:"LIST",73:"COMA",74:"INT",75:"DOUBLE",76:"BOOL",77:"CHAR",78:"STRING",80:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[20,1],[20,1],[7,7],[7,11],[7,9],[7,6],[7,10],[7,10],[7,9],[7,8],[27,3],[27,3],[27,3],[27,3],[27,1],[34,1],[34,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[8,7],[44,2],[44,1],[44,1],[45,4],[45,6],[45,3],[45,5],[46,3],[46,5],[46,2],[46,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[55,3],[55,3],[55,3],[55,3],[55,3],[10,7],[10,6],[11,10],[11,10],[11,9],[11,9],[9,8],[9,7],[12,3],[12,5],[12,5],[12,5],[12,5],[15,4],[15,4],[15,4],[15,4],[13,11],[13,9],[16,4],[14,12],[17,4],[66,4],[67,6],[71,3],[71,1],[64,1],[64,1],[64,1],[64,1],[64,1],[18,8],[18,8],[18,7],[18,7],[19,5],[79,3],[79,1],[79,0],[82,2],[81,3],[81,1],[81,0],[23,3],[24,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 18: case 19:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 55:
console.log("entero");
break;
case 56:
console.log("decimal");
break;
case 57:
console.log("cadena");
break;
case 58:
console.log("caracter");
break;
case 59:
console.log("booleano")
break;
case 60:
console.log("operacion");
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{1:[3]},{5:[1,37]},o($Ve,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,64:24,66:27,67:28,23:30,24:31,4:38,2:$V0,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd}),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{21:[1,39],22:[1,40]},{26:[1,41]},{26:[1,42]},{29:[1,43]},{26:[1,44]},{26:[1,45]},{33:[1,46],68:[1,47]},{39:[1,48]},{26:[1,50],56:$Vg,57:$Vh,65:$Vi,68:$Vj},{65:[1,54]},{65:[1,55]},{33:[1,56]},o($Vk,[2,20]),o($Vk,[2,21]),o($Vl,[2,92]),o($Vl,[2,93]),o($Vl,[2,94]),o($Vl,[2,95]),o($Vl,[2,96]),{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,18]),o($Vf,[2,19]),{27:57,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{33:[1,68]},{2:$V0,4:69,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,70],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{27:71,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{12:72,15:73,33:[1,75],64:74,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{22:$Vt,26:[1,78],65:$Vu},{69:[1,79]},{64:80,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{31:81,33:[1,82],34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,66:83,67:84},{28:$Vv,31:86,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,81:85},{51:[1,87],68:[1,88]},{56:[1,89]},{57:[1,90]},{31:91,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:92,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{26:[1,93]},{28:[1,94]},o($Vw,[2,34],{32:95,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),{32:107,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC},o($VI,[2,55]),o($VI,[2,56]),o($VI,[2,57]),o($VI,[2,58]),o($VI,[2,59]),o($VI,[2,60]),o($VI,[2,35]),o($VI,[2,36]),{28:[1,108]},{21:[1,109]},{61:[1,110]},{28:[1,111]},{27:112,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{27:113,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{33:[1,114]},{65:$Vi},o($VJ,[2,74]),{31:115,33:[1,116],34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,66:117,67:118},{28:$VK,64:121,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,79:119,82:120},{33:[1,122]},{41:[1,123]},{22:[1,124],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{22:[1,125],68:$Vj},{22:[1,126]},{22:[1,127]},{28:[1,128]},{28:[2,107],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,73:[1,129]},{69:[1,130]},{51:[1,131]},o($Vk,[2,109]),o($Vk,[2,110]),{22:[1,132],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{22:[1,133],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{28:$VK,64:121,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,79:134,82:120},{29:[1,135]},{31:136,33:[1,137],34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:138,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:139,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:140,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:141,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{31:142,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},o($VL,[2,37]),o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,40]),o($VL,[2,41]),o($VL,[2,42]),{31:143,33:[1,144],34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{29:[1,145]},{61:[1,146]},{26:[1,147]},{29:[1,148]},{22:[1,149]},{22:[1,150]},{22:$Vt,65:$Vu},{22:[1,151],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{22:[1,152],68:$Vj},{22:[1,153]},{22:[1,154]},{28:[1,155]},{28:[2,103],73:[1,156]},{33:[1,157]},{65:[1,158]},{33:[1,159]},o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),{22:[1,160]},{28:$Vv,31:86,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,81:161},o($VM,[2,88]),{69:[1,162]},o($Vf,[2,85]),o($Vf,[2,87]),{28:[1,163]},{2:$V0,4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,165],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},o($Vw,[2,30],{56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($Vw,[2,32]),o($VN,[2,61],{58:$VF,59:$VG,60:$VH}),o($VN,[2,62],{58:$VF,59:$VG,60:$VH}),o($VO,[2,63],{60:$VH}),o($VO,[2,64],{60:$VH}),o($VI,[2,65]),o($Vw,[2,31],{56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($Vw,[2,33]),{44:166,45:167,46:168,47:$VP,50:$VQ},{26:[1,171]},{27:172,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{2:$V0,4:173,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,174],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{20:175,23:30,24:31,33:$VR},{20:177,23:30,24:31,33:$VR},o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),{29:[1,178]},{28:$VK,64:121,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,79:179,82:120},o([28,73],[2,105]),{29:[1,181],70:[1,180]},{65:[1,182]},o($Vf,[2,101]),{28:[2,106]},{69:[1,183]},{29:[1,184]},{21:[1,185]},o($Vf,[2,25],{30:[1,186]}),{21:[1,187]},{21:[2,45],44:188,45:167,46:168,47:$VP,50:$VQ},{21:[2,46]},{31:189,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{48:[1,190]},{27:191,31:58,33:$Vm,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65},{28:[1,192]},{21:[1,193]},o($Vf,[2,67]),{28:[1,194]},{56:$Vg,57:$Vh},{28:[1,195]},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,197],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{28:[2,102]},{64:198,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{31:200,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,71:199},{70:[1,201]},o($VM,[2,89]),{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,203],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},o($Vf,[2,22],{30:[1,204]}),{7:206,25:$V1,29:[1,205]},o($Vf,[2,43]),{21:[2,44]},{48:[1,207],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{2:$V0,4:208,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[2,53],23:30,24:31,25:$V1,33:$V2,43:$V3,49:[1,209],61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{28:[1,210]},o($Vf,[2,73]),o($Vf,[2,66]),{29:[1,211]},{29:[1,212]},{21:[1,213]},o($Vf,[2,99]),{68:[1,214]},{21:[1,215]},{21:[2,91],56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,73:[1,216]},{72:[1,217]},{21:[1,218]},o($Vf,[2,100]),{7:220,25:$V1,29:[1,219]},{2:$V0,4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,222],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},o($Vf,[2,29]),o($VS,[2,49],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,64:24,66:27,67:28,23:30,24:31,4:223,2:$V0,25:$V1,33:$V2,43:$V3,49:[1,224],61:$V4,62:$V5,63:$V6,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd}),{21:[2,51],49:[1,225]},{22:[1,226]},o($Vf,[2,72]),{2:$V0,4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,228],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},{2:$V0,4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,230],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},o($Vf,[2,97]),{51:[1,231]},{22:[1,232]},{31:200,34:64,35:$Vn,36:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:65,71:233},{39:[1,234]},o($Vf,[2,98]),{2:$V0,4:235,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:[1,236],23:30,24:31,25:$V1,33:$V2,43:$V3,61:$V4,62:$V5,63:$V6,64:24,66:27,67:28,72:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc,80:$Vd},o($Vf,[2,24]),{21:[1,237]},o($Vf,[2,28]),o($VS,[2,47],{49:[1,238]}),{22:[1,239]},{22:[1,240]},{21:[2,54]},{21:[1,241]},o($Vf,[2,70]),{21:[1,242]},o($Vf,[2,71]),{69:[1,243]},o($Vf,[2,84]),{21:[2,90]},{64:244,74:$V8,75:$V9,76:$Va,77:$Vb,78:$Vc},{21:[1,245]},o($Vf,[2,27]),o($Vf,[2,26]),{22:[1,246]},o($VS,[2,50]),{21:[2,52]},o($Vf,[2,68]),o($Vf,[2,69]),{22:[1,247]},{41:[1,248]},o($Vf,[2,23]),o($VS,[2,48]),o($Vf,[2,83]),{22:[1,249]},o($Vf,[2,86])],
defaultActions: {37:[2,1],161:[2,106],168:[2,46],179:[2,102],188:[2,44],226:[2,54],233:[2,90],240:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "PUNTO";
break;
case 1:return "COMA";
break;
case 2:return 22;
break;
case 3:return 48;
break;
case 4:return 26;
break;
case 5:return 28;
break;
case 6:return 68;
break;
case 7:return 69;
break;
case 8:return 29;
break;
case 9:return 21;
break;
case 10:return  'IGUALIGUAL';
break;
case 11:return  'DIFERENTE';
break;
case 12:return  'MENORIGUAL';
break;
case 13:return  'MENOR';
break;
case 14:return  'MAYORIGUAL';
break;
case 15:return  'MAYOR';
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 58;
break;
case 19:return 59;
break;
case 20:return 60;
break;
case 21:return 'MODULO';
break;
case 22:return 65;
break;
case 23:return  'INT';
break;
case 24:return  'DOUBLE';
break;
case 25:return  'BOOL';
break;
case 26:return  'CHAR';
break;
case 27:return  'STRING';
break;
case 28:return  'VOID';
break;
case 29:return  'NEW';
break;
case 30:return  'LIST';
break;
case 31:return 'ADD';
break;
case 32:return 'PRINT';
break;
case 33:return 'TOLOWER';
break;
case 34:return 'TOUPER';
break;
case 35:return 'LENGTH';
break;
case 36:return 'TRUNCATE';
break;
case 37:return 'ROUND';
break;
case 38:return 'TYPEOF';
break;
case 39:return 'TOSTRING';
break;
case 40:return 'TOCHARARRAY';
break;
case 41:return 'EXEC'
break;
case 42:return 25;
break;
case 43:return 30;
break;
case 44:return 43;
break;
case 45:return 47;
break;
case 46:return 50;
break;
case 47:return 49;
break;
case 48:return 'CONTINUE';
break;
case 49:return 'RETURN';
break;
case 50:return 63;
break;
case 51:return 61;
break;
case 52:return 62;
break;
case 53:return  'OR';
break;
case 54:return  'AND';
break;
case 55:return  'NOT';
break;
case 56:
break;
case 57:
break;
case 58:return 51;
break;
case 59:return 52;
break;
case 60:return 53;
break;
case 61:return 54
break;
case 62:return 35;
break;
case 63:return 36;
break;
case 64:return 33;
break;
case 65:return 5;
break;
case 66: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:".+")/i,/^(?:'.')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-zA-z_]([0-9a-zA-z_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}