/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,27],$V3=[1,21],$V4=[1,23],$V5=[1,24],$V6=[1,22],$V7=[1,26],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,37],$Vc=[1,38],$Vd=[1,30],$Ve=[1,33],$Vf=[5,22,48,50,51],$Vg=[2,5,22,26,34,44,48,50,51,62,63,64,73,75,76,77,78,79,81,82],$Vh=[1,54],$Vi=[1,55],$Vj=[1,51],$Vk=[1,53],$Vl=[2,5,22,26,29,34,44,48,50,51,62,63,64,73,75,76,77,78,79,81,82],$Vm=[34,42,69],$Vn=[1,62],$Vo=[1,69],$Vp=[1,70],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,79],$Vv=[1,80],$Vw=[2,110],$Vx=[23,29],$Vy=[1,105],$Vz=[1,106],$VA=[1,107],$VB=[1,108],$VC=[1,109],$VD=[1,110],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[22,23,29,38,39,40,41,42,43,49,57,58,59,60,61,74],$VK=[2,5,22,26,34,36,37,44,48,50,51,52,53,54,55,62,63,64,73,75,76,77,78,79,81,82],$VL=[2,106],$VM=[34,36,37,52,53,54,55],$VN=[23,66],$VO=[22,23,29,38,39,40,41,42,43,49,57,58,74],$VP=[22,23,29,38,39,40,41,42,43,49,57,58,59,60,74],$VQ=[1,175],$VR=[1,176],$VS=[1,182],$VT=[22,48,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"if":7,"switch":8,"dowhile":9,"while":10,"for":11,"declaracion_variables":12,"declaracion_arreglos":13,"declaracion_listas":14,"asignacion_variables":15,"asignacion_arreglos":16,"asignacion_listas":17,"declaracion_funciones":18,"llamada_funciones":19,"actualizacion":20,"print":21,"LLAVE_C":22,"P_COMA":23,"incremento":24,"decremento":25,"IF":26,"PARENTESIS_A":27,"condicion":28,"PARENTESIS_C":29,"LLAVE_A":30,"ELSE":31,"valor":32,"comparador":33,"IDENTIFICADOR":34,"booleano":35,"TRUE":36,"FALSE":37,"IGUALIGUAL":38,"DIFERENTE":39,"MENOR":40,"MENORIGUAL":41,"MAYOR":42,"MAYORIGUAL":43,"SWITCH":44,"cases":45,"case":46,"default":47,"CASE":48,"DOSPUNTOS":49,"BREAK":50,"DEFAULT":51,"ENTERO":52,"DECIMAL":53,"CADENA":54,"CARACTER":55,"operacion":56,"MAS":57,"MENOS":58,"MULTI":59,"DIVISION":60,"POTENCIA":61,"WHILE":62,"FOR":63,"DO":64,"tipo":65,"IGUAL":66,"acceso_arreglos":67,"acceso_listas":68,"CORCHETE_A":69,"CORCHETE_C":70,"NEW":71,"listado_datos":72,"LIST":73,"COMA":74,"INT":75,"DOUBLE":76,"BOOL":77,"CHAR":78,"STRING":79,"parametros":80,"VOID":81,"PRINT":82,"valores":83,"parametro":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"LLAVE_C",23:"P_COMA",26:"IF",27:"PARENTESIS_A",29:"PARENTESIS_C",30:"LLAVE_A",31:"ELSE",34:"IDENTIFICADOR",36:"TRUE",37:"FALSE",38:"IGUALIGUAL",39:"DIFERENTE",40:"MENOR",41:"MENORIGUAL",42:"MAYOR",43:"MAYORIGUAL",44:"SWITCH",48:"CASE",49:"DOSPUNTOS",50:"BREAK",51:"DEFAULT",52:"ENTERO",53:"DECIMAL",54:"CADENA",55:"CARACTER",57:"MAS",58:"MENOS",59:"MULTI",60:"DIVISION",61:"POTENCIA",62:"WHILE",63:"FOR",64:"DO",66:"IGUAL",69:"CORCHETE_A",70:"CORCHETE_C",71:"NEW",73:"LIST",74:"COMA",75:"INT",76:"DOUBLE",77:"BOOL",78:"CHAR",79:"STRING",81:"VOID",82:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[20,1],[20,1],[7,7],[7,11],[7,9],[7,6],[7,10],[7,10],[7,9],[7,8],[28,3],[28,3],[28,3],[28,3],[28,1],[35,1],[35,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[8,7],[45,2],[45,1],[45,1],[46,4],[46,6],[46,3],[46,5],[47,3],[47,5],[47,2],[47,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[56,3],[56,3],[56,3],[56,3],[56,3],[10,7],[10,6],[11,10],[11,10],[11,9],[11,9],[9,8],[9,7],[12,3],[12,5],[12,5],[12,5],[12,5],[15,4],[15,4],[15,4],[15,4],[13,11],[13,9],[16,4],[14,12],[17,4],[67,4],[68,6],[72,3],[72,1],[65,1],[65,1],[65,1],[65,1],[65,1],[18,8],[18,8],[18,7],[18,7],[21,5],[19,5],[80,3],[80,1],[80,0],[84,2],[83,3],[83,1],[83,0],[24,3],[25,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 19: case 20:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 56:
console.log("entero");
break;
case 57:
console.log("decimal");
break;
case 58:
console.log("cadena");
break;
case 59:
console.log("caracter");
break;
case 60:
console.log("booleano")
break;
case 61:
console.log("operacion");
break;
case 102:
console.log("print");
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{1:[3]},{5:[1,39]},o($Vf,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,65:25,67:28,68:29,24:31,25:32,4:40,2:$V0,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve}),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),{22:[1,41],23:[1,42]},{27:[1,43]},{27:[1,44]},{30:[1,45]},{27:[1,46]},{27:[1,47]},{34:[1,48],69:[1,49]},{40:[1,50]},{27:[1,52],57:$Vh,58:$Vi,66:$Vj,69:$Vk},{66:[1,56]},{66:[1,57]},{34:[1,58]},o($Vl,[2,21]),o($Vl,[2,22]),{27:[1,59]},o($Vm,[2,93]),o($Vm,[2,94]),o($Vm,[2,95]),o($Vm,[2,96]),o($Vm,[2,97]),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,19]),o($Vg,[2,20]),{28:60,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{34:[1,71]},{2:$V0,4:72,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,73],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{28:74,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{12:75,15:76,34:[1,78],65:77,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc},{23:$Vu,27:[1,81],66:$Vv},{70:[1,82]},{65:83,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc},{32:84,34:[1,85],35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,67:86,68:87},{29:$Vw,32:89,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,83:88},{52:[1,90],69:[1,91]},{57:[1,92]},{58:[1,93]},{32:94,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:95,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{27:[1,96]},{32:97,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{29:[1,98]},o($Vx,[2,35],{33:99,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),{33:111,38:$Vy,39:$Vz,40:$VA,41:$VB,42:$VC,43:$VD},o($VJ,[2,56]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,36]),o($VJ,[2,37]),{29:[1,112]},{22:[1,113]},{62:[1,114]},{29:[1,115]},{28:116,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{28:117,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{34:[1,118]},{66:$Vj},o($VK,[2,75]),{32:119,34:[1,120],35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,67:121,68:122},{29:$VL,65:125,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:123,84:124},{34:[1,126]},{42:[1,127]},{23:[1,128],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{23:[1,129],69:$Vk},{23:[1,130]},{23:[1,131]},{29:[1,132]},{29:[2,109],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,74:[1,133]},{70:[1,134]},{52:[1,135]},o($Vl,[2,111]),o($Vl,[2,112]),{23:[1,136],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{23:[1,137],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{29:$VL,65:125,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:138,84:124},{29:[1,139],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{30:[1,140]},{32:141,34:[1,142],35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:143,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:144,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:145,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:146,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{32:147,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),o($VM,[2,42]),o($VM,[2,43]),{32:148,34:[1,149],35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{30:[1,150]},{62:[1,151]},{27:[1,152]},{30:[1,153]},{23:[1,154]},{23:[1,155]},{23:$Vu,66:$Vv},{23:[1,156],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{23:[1,157],69:$Vk},{23:[1,158]},{23:[1,159]},{29:[1,160]},{29:[2,105],74:[1,161]},{34:[1,162]},{66:[1,163]},{34:[1,164]},o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),{23:[1,165]},{29:$Vw,32:89,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,83:166},o($VN,[2,89]),{70:[1,167]},o($Vg,[2,86]),o($Vg,[2,88]),{29:[1,168]},{23:[1,169]},{2:$V0,4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,171],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vx,[2,31],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vx,[2,33]),o($VO,[2,62],{59:$VG,60:$VH,61:$VI}),o($VO,[2,63],{59:$VG,60:$VH,61:$VI}),o($VP,[2,64],{61:$VI}),o($VP,[2,65],{61:$VI}),o($VJ,[2,66]),o($Vx,[2,32],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vx,[2,34]),{45:172,46:173,47:174,48:$VQ,51:$VR},{27:[1,177]},{28:178,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{2:$V0,4:179,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,180],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{20:181,24:31,25:32,34:$VS},{20:183,24:31,25:32,34:$VS},o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79]),{30:[1,184]},{29:$VL,65:125,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:185,84:124},o([29,74],[2,107]),{30:[1,187],71:[1,186]},{66:[1,188]},o($Vg,[2,103]),{29:[2,108]},{70:[1,189]},{30:[1,190]},o($Vg,[2,102]),{22:[1,191]},o($Vg,[2,26],{31:[1,192]}),{22:[1,193]},{22:[2,46],45:194,46:173,47:174,48:$VQ,51:$VR},{22:[2,47]},{32:195,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{49:[1,196]},{28:197,32:61,34:$Vn,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68},{29:[1,198]},{22:[1,199]},o($Vg,[2,68]),{29:[1,200]},{57:$Vh,58:$Vi},{29:[1,201]},{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,203],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{29:[2,104]},{65:204,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc},{32:206,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,72:205},{71:[1,207]},o($VN,[2,90]),{2:$V0,4:208,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,209],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vg,[2,23],{31:[1,210]}),{7:212,26:$V1,30:[1,211]},o($Vg,[2,44]),{22:[2,45]},{49:[1,213],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{2:$V0,4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[2,54],24:31,25:32,26:$V1,34:$V2,44:$V3,50:[1,215],62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{29:[1,216]},o($Vg,[2,74]),o($Vg,[2,67]),{30:[1,217]},{30:[1,218]},{22:[1,219]},o($Vg,[2,100]),{69:[1,220]},{22:[1,221]},{22:[2,92],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,74:[1,222]},{73:[1,223]},{22:[1,224]},o($Vg,[2,101]),{7:226,26:$V1,30:[1,225]},{2:$V0,4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,228],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vg,[2,30]),o($VT,[2,50],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,65:25,67:28,68:29,24:31,25:32,4:229,2:$V0,26:$V1,34:$V2,44:$V3,50:[1,230],62:$V4,63:$V5,64:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve}),{22:[2,52],50:[1,231]},{23:[1,232]},o($Vg,[2,73]),{2:$V0,4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,234],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},{2:$V0,4:235,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,236],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vg,[2,98]),{52:[1,237]},{23:[1,238]},{32:206,35:67,36:$Vo,37:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:68,72:239},{40:[1,240]},o($Vg,[2,99]),{2:$V0,4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:[1,242],24:31,25:32,26:$V1,34:$V2,44:$V3,62:$V4,63:$V5,64:$V6,65:25,67:28,68:29,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vg,[2,25]),{22:[1,243]},o($Vg,[2,29]),o($VT,[2,48],{50:[1,244]}),{23:[1,245]},{23:[1,246]},{22:[2,55]},{22:[1,247]},o($Vg,[2,71]),{22:[1,248]},o($Vg,[2,72]),{70:[1,249]},o($Vg,[2,85]),{22:[2,91]},{65:250,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc},{22:[1,251]},o($Vg,[2,28]),o($Vg,[2,27]),{23:[1,252]},o($VT,[2,51]),{22:[2,53]},o($Vg,[2,69]),o($Vg,[2,70]),{23:[1,253]},{42:[1,254]},o($Vg,[2,24]),o($VT,[2,49]),o($Vg,[2,84]),{23:[1,255]},o($Vg,[2,87])],
defaultActions: {39:[2,1],166:[2,108],174:[2,47],185:[2,104],194:[2,45],232:[2,55],239:[2,91],246:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "PUNTO";
break;
case 1:return "COMA";
break;
case 2:return 23;
break;
case 3:return 49;
break;
case 4:return 27;
break;
case 5:return 29;
break;
case 6:return 69;
break;
case 7:return 70;
break;
case 8:return 30;
break;
case 9:return 22;
break;
case 10:return  'IGUALIGUAL';
break;
case 11:return  'DIFERENTE';
break;
case 12:return  'MENORIGUAL';
break;
case 13:return  'MENOR';
break;
case 14:return  'MAYORIGUAL';
break;
case 15:return  'MAYOR';
break;
case 16:return 57;
break;
case 17:return 58;
break;
case 18:return 59;
break;
case 19:return 60;
break;
case 20:return 61;
break;
case 21:return 'MODULO';
break;
case 22:return 66;
break;
case 23:return  'INT';
break;
case 24:return  'DOUBLE';
break;
case 25:return  'BOOL';
break;
case 26:return  'CHAR';
break;
case 27:return  'STRING';
break;
case 28:return  'VOID';
break;
case 29:return  'NEW';
break;
case 30:return  'LIST';
break;
case 31:return 'ADD';
break;
case 32:return 82;
break;
case 33:return 'TOLOWER';
break;
case 34:return 'TOUPER';
break;
case 35:return 'LENGTH';
break;
case 36:return 'TRUNCATE';
break;
case 37:return 'ROUND';
break;
case 38:return 'TYPEOF';
break;
case 39:return 'TOSTRING';
break;
case 40:return 'TOCHARARRAY';
break;
case 41:return 'EXEC'
break;
case 42:return 26;
break;
case 43:return 31;
break;
case 44:return 44;
break;
case 45:return 48;
break;
case 46:return 51;
break;
case 47:return 50;
break;
case 48:return 'CONTINUE';
break;
case 49:return 'RETURN';
break;
case 50:return 64;
break;
case 51:return 62;
break;
case 52:return 63;
break;
case 53:return  'OR';
break;
case 54:return  'AND';
break;
case 55:return  'NOT';
break;
case 56:
break;
case 57:
break;
case 58:return 52;
break;
case 59:return 53;
break;
case 60:return 54;
break;
case 61:return 55
break;
case 62:return 36;
break;
case 63:return 37;
break;
case 64:return 34;
break;
case 65:return 5;
break;
case 66: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:".+")/i,/^(?:'.')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-zA-z_]([0-9a-zA-z_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}