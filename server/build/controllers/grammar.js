/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,37],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,36],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,24],$Vl=[2,5,8,9,22,23,25,26,51,52,53,55,56,57,59,61,65,67,71,72,73,74,75,76,77],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,64],$Vx=[1,63],$Vy=[2,5,8,9,22,23,25,26,51,52,53,55,56,57,59,60,61,65,67,71,72,73,74,75,76,77],$Vz=[30,51],$VA=[1,75],$VB=[1,74],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[12,27,30,31,32,33,34,35,36,37,39,40,41,42,43,44,66,70],$VP=[2,51],$VQ=[1,92],$VR=[1,93],$VS=[12,30,36,37,66,70],$VT=[2,5,8,9,22,23,25,26,27,28,38,45,46,47,48,49,50,51,52,53,55,56,57,59,61,65,67,71,72,73,74,75,76,77],$VU=[30,70],$VV=[12,27,30,31,36,37,39,40,41,42,43,44,66,70],$VW=[12,27,30,31,32,33,35,36,37,39,40,41,42,43,44,66,70],$VX=[12,30,36,37,39,40,41,42,43,44,66,70],$VY=[1,161],$VZ=[1,162],$V_=[9,65,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"sentencias":7,"LLAVE_A":8,"LLAVE_C":9,"declaracion_variables":10,"asignacion_variables":11,"P_COMA":12,"actualizacion":13,"print_":14,"else_if":15,"while":16,"do_while":17,"for":18,"switch":19,"function":20,"function_call":21,"EXEC":22,"RETURN":23,"expression":24,"BREAK":25,"CONTINUE":26,"MENOS":27,"PARENTESIS_A":28,"tipo":29,"PARENTESIS_C":30,"MAS":31,"MULTI":32,"DIVISION":33,"POTENCIA":34,"MODULO":35,"AND":36,"OR":37,"NOT":38,"MAYOR":39,"MENOR":40,"MAYORIGUAL":41,"MENORIGUAL":42,"IGUALIGUAL":43,"DIFERENTE":44,"ENTERO":45,"DECIMAL":46,"CADENA":47,"CARACTER":48,"FALSE":49,"TRUE":50,"IDENTIFICADOR":51,"incremento":52,"decremento":53,"IGUAL":54,"WHILE":55,"DO":56,"FOR":57,"if":58,"IF":59,"ELSE":60,"SWITCH":61,"case_list":62,"default":63,"case":64,"DEFAULT":65,"DOSPUNTOS":66,"CASE":67,"parametros":68,"params_value":69,"COMA":70,"INT":71,"DOUBLE":72,"BOOL":73,"CHAR":74,"STRING":75,"VOID":76,"PRINT":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"LLAVE_A",9:"LLAVE_C",12:"P_COMA",22:"EXEC",23:"RETURN",25:"BREAK",26:"CONTINUE",27:"MENOS",28:"PARENTESIS_A",30:"PARENTESIS_C",31:"MAS",32:"MULTI",33:"DIVISION",34:"POTENCIA",35:"MODULO",36:"AND",37:"OR",38:"NOT",39:"MAYOR",40:"MENOR",41:"MAYORIGUAL",42:"MENORIGUAL",43:"IGUALIGUAL",44:"DIFERENTE",45:"ENTERO",46:"DECIMAL",47:"CADENA",48:"CARACTER",49:"FALSE",50:"TRUE",51:"IDENTIFICADOR",52:"incremento",53:"decremento",54:"IGUAL",55:"WHILE",56:"DO",57:"FOR",59:"IF",60:"ELSE",61:"SWITCH",65:"DEFAULT",66:"DOSPUNTOS",67:"CASE",70:"COMA",71:"INT",72:"DOUBLE",73:"BOOL",74:"CHAR",75:"STRING",76:"VOID",77:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[7,2],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[6,2],[6,2],[6,2],[6,2],[24,2],[24,4],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[13,1],[13,1],[10,3],[10,5],[11,3],[16,7],[17,9],[18,10],[18,10],[58,7],[58,3],[15,3],[15,1],[19,8],[19,7],[19,7],[62,2],[62,1],[63,3],[64,4],[20,8],[20,7],[21,3],[21,4],[68,4],[68,2],[69,3],[69,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
controllador.GrammarController.instructionList = $$[$0-1];
break;
case 2:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 3:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 6:

        err = {tipo:"sintactico", mensaje:"se recupero en "+yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
        
break;
case 7:
 this.$ = $$[$0] 
break;
case 8:
 this.$ = $$[$0-1] 
break;
case 9:
this.$ = $$[$0] 
break;
case 10: case 17:
this.$ = $$[$0-1]
break;
case 11:
this.$ = new listIf.ListIf(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 12: case 13: case 14: case 15: case 16: case 18:
this.$ = $$[$0]
break;
case 19:
this.$ = new returnn.Return($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 20: case 21: case 22:
this.$ = new returnn.Return(null,_$[$0].first_line,_$[$0].first_column);
break;
case 23: case 24:

        err = {tipo:"sintactico", mensaje:"se recupero en "+yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
         console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
         
break;
case 25:
 this.$ = new exp.Expression(exp.Expression_type.NEGADO,_$[$0].first_line,_$[$0].first_column,$$[$0],null); 
break;
case 27:
this.$ = new exp.Expression(exp.Expression_type.SUMA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]); 
break;
case 28:
this.$ = new exp.Expression(exp.Expression_type.RESTA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 29:
this.$ = new exp.Expression(exp.Expression_type.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 30:
this.$ = new exp.Expression(exp.Expression_type.DIVISION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 31:
this.$ = new exp.Expression(exp.Expression_type.POTENCIA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 32:
this.$ = new exp.Expression(exp.Expression_type.MODULO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 33:
this.$=$$[$0-1];
break;
case 34:
this.$ = new exp.Expression(exp.Expression_type.AND, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 35:
this.$ = new exp.Expression(exp.Expression_type.OR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 36:
this.$ = new exp.Expression(exp.Expression_type.NOT,_$[$0].first_line,_$[$0].first_column,$$[$0],null);
break;
case 37:
this.$ = new exp.Expression(exp.Expression_type.MAYOR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 38:
this.$ = new exp.Expression(exp.Expression_type.MENOR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 39:
this.$ = new exp.Expression(exp.Expression_type.MAYORIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 40:
this.$ = new exp.Expression(exp.Expression_type.MENORIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 41:
this.$ = new exp.Expression(exp.Expression_type.IGUALIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 42:
this.$ = new exp.Expression(exp.Expression_type.DIFERENTE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 43:
this.$ = new exp.Expression(exp.Expression_type.AUMENTO,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-2],$$[$0-2]);
break;
case 44:
this.$ = new exp.Expression(exp.Expression_type.DISMINUCION,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-2],$$[$0-2]);
break;
case 45:
this.$ = new exp.Expression(exp.Expression_type.ENTERO,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 46:
this.$ = new exp.Expression(exp.Expression_type.DECIMAL,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 47:
this.$ = new exp.Expression(exp.Expression_type.CADENA,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 48:
this.$ = new exp.Expression(exp.Expression_type.CHAR,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 49: case 50:
this.$ = new exp.Expression(exp.Expression_type.BOOLEAN,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 51:
this.$ = new exp.Expression(exp.Expression_type.IDENTIFICADOR,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 52:
this.$ = new exp.Expression(exp.Expression_type.FUNCION,this._$.first_line,this._$.first_column,null,null,$$[$0].id,$$[$0].parametersExpressions);
break;
case 55:
this.$ = new declaration.Declaration($$[$0-1],$$[$0-2],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 56:
this.$ = new declaration.Declaration($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 57:
this.$ = new asignation.Asignation($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58:
 this.$ = new whilee.While($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 59:
 this.$ = new do_while.DoWhile($$[$0-2], $$[$0-6],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 60: case 61:
this.$ = new print.Print($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 62:
this.$ = new iff.If($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column) ;
break;
case 63:
this.$ = new elsee.Else($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 64: case 79:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 65:

        this.$ =[];
        this.$.push($$[$0]);
    
break;
case 66:
this.$ = new print.Print($$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 67: case 68:
this.$ = new print.Print($$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 73:
this.$ = new func.Function($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 74:
this.$ = new func.Function($$[$0-5],$$[$0-6],$$[$0-1],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 75:
this.$ = new func_call.FunctionCall($$[$0-2],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 76:
this.$ = new func_call.FunctionCall($$[$0-3],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:

        this.$ = $$[$0-3];
        this.$.push(new declaration.Declaration($$[$0],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].first_column));
    
break;
case 78:

        this.$ = [];
        this.$.push(new declaration.Declaration($$[$0],$$[$0-1],null,_$[$0].first_line,_$[$0].first_column));
    
break;
case 80:

        this.$ = [];
        this.$.push($$[$0]);
    
break;
case 81:
this.$ = sym.EnumType.int;
break;
case 82:
this.$ = sym.EnumType.double;
break;
case 83:
this.$ = sym.EnumType.boolean;
break;
case 84:
this.$ = sym.EnumType.char;
break;
case 85:
this.$ = sym.EnumType.string;
break;
case 86:
this.$ = sym.EnumType.void
break;
case 87:
this.$ = new print.Print($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{1:[3]},{2:$V0,5:[1,38],6:39,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($Vl,[2,3]),o($Vl,[2,7]),{12:[1,40]},o($Vl,[2,9]),{12:[1,41]},o($Vl,[2,11],{60:[1,42]}),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),{12:[1,43]},{2:$V0,6:44,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{12:[1,46],21:57,24:45,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{12:[1,58]},{12:[1,59]},{9:[1,61],12:[1,60]},{51:[1,62]},{28:$Vw,54:$Vx},o($Vl,[2,53]),o($Vl,[2,54]),{28:[1,65]},o($Vy,[2,65]),{28:[1,66]},{8:[1,67]},{28:[1,68]},{28:[1,69]},o($Vz,[2,81]),o($Vz,[2,82]),o($Vz,[2,83]),o($Vz,[2,84]),o($Vz,[2,85]),o($Vz,[2,86]),{28:[1,70]},{2:$V0,4:71,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,8]),o($Vl,[2,10]),{8:$V1,58:72,59:$Vc},o($Vl,[2,17]),o($Vl,[2,18]),{12:[1,73],27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},o($Vl,[2,20]),{21:57,24:88,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:90,27:$Vm,28:$Vn,29:89,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{21:57,24:91,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,$VP,{28:$Vw}),o($VO,[2,52]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),{12:$VQ,28:[1,94],54:$VR},{21:57,24:95,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:98,27:$Vm,28:$Vn,30:[1,96],38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,69:97},{21:57,24:99,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:100,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{2:$V0,4:101,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{10:102,29:103,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{21:57,24:104,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:105,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{2:$V0,6:39,8:$V1,9:[1,106],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($Vy,[2,64]),o($Vl,[2,19]),{21:57,24:107,27:$Vm,28:$Vn,31:[1,108],38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:109,27:[1,110],28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:111,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:112,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:113,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:114,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:115,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:116,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:117,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:118,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:119,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:120,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:121,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{21:57,24:122,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},o($VO,[2,25]),{30:[1,123]},{27:$VA,30:[1,124],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},o($VS,[2,36],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),o($VT,[2,55]),{21:57,24:125,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{29:128,30:[1,127],68:126,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o([12,30],[2,57],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),o($VO,[2,75]),{30:[1,129],70:[1,130]},o($VU,[2,80],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),{27:$VA,30:[1,131],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{27:$VA,30:[1,132],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{2:$V0,6:39,8:$V1,9:[1,133],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{21:57,24:134,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{51:[1,135]},{27:$VA,30:[1,136],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{27:$VA,30:[1,137],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},o($Vy,[2,63]),o($VV,[2,27],{32:$VC,33:$VD,34:$VE,35:$VF}),o($VO,[2,43]),o($VV,[2,28],{32:$VC,33:$VD,34:$VE,35:$VF}),o($VO,[2,44],{21:57,24:88,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv}),o($VW,[2,29],{34:$VE}),o($VW,[2,30],{34:$VE}),o($VO,[2,31]),o($VW,[2,32],{34:$VE}),o($VS,[2,34],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),o([12,30,37,66,70],[2,35],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),o($VX,[2,37],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),o($VX,[2,38],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),o($VX,[2,39],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),o($VX,[2,40],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),o($VX,[2,41],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),o($VX,[2,42],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF}),{21:57,24:138,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},o($VO,[2,33]),{12:[1,139],27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{30:[1,140],70:[1,141]},{8:[1,142]},{51:[1,143]},o($VO,[2,76]),{21:57,24:144,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{12:[2,87]},{8:[1,145]},{55:[1,146]},{12:[1,147],27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{12:$VQ,54:$VR},{8:[1,148]},{8:[1,149]},o($VO,[2,26]),o($VT,[2,56]),{8:[1,150]},{29:151,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{2:$V0,4:152,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($VU,[2,78]),o($VU,[2,79],{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN}),{2:$V0,4:153,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{28:[1,154]},{11:155,21:57,24:156,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:[1,157]},{62:158,63:159,64:160,65:$VY,67:$VZ},{2:$V0,4:163,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,4:164,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{51:[1,165]},{2:$V0,6:39,8:$V1,9:[1,166],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,6:39,8:$V1,9:[1,167],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{21:57,24:168,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{30:[1,169]},{27:$VA,30:[1,170],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},o([27,30,31,32,33,34,35,36,37,39,40,41,42,43,44],$VP,{28:$Vw,54:$Vx}),{9:[1,172],63:171,64:173,65:$VY,67:$VZ},{9:[1,174]},o($V_,[2,70]),{66:[1,175]},{21:57,24:176,27:$Vm,28:$Vn,38:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv},{2:$V0,6:39,8:$V1,9:[1,177],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,6:39,8:$V1,9:[1,178],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($VU,[2,77]),o($Vl,[2,74]),o($Vl,[2,58]),{27:$VA,30:[1,179],31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN},{8:[1,180]},{8:[1,181]},{9:[1,182]},o($Vl,[2,67]),o($V_,[2,69]),o($Vl,[2,68]),{2:$V0,4:183,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{27:$VA,31:$VB,32:$VC,33:$VD,34:$VE,35:$VF,36:$VG,37:$VH,39:$VI,40:$VJ,41:$VK,42:$VL,43:$VM,44:$VN,66:[1,184]},o($Vy,[2,62]),o($Vl,[2,73]),{12:[1,185]},{2:$V0,4:186,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,4:187,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($Vl,[2,66]),{2:$V0,6:39,8:$V1,9:[2,71],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,4:188,6:3,8:$V1,10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($Vl,[2,59]),{2:$V0,6:39,8:$V1,9:[1,189],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},{2:$V0,6:39,8:$V1,9:[1,190],10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:$V2,23:$V3,25:$V4,26:$V5,29:20,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,58:25,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk},o($V_,[2,72],{10:4,11:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,29:20,58:25,6:39,2:$V0,8:$V1,22:$V2,23:$V3,25:$V4,26:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:$Vb,59:$Vc,61:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk}),o($Vl,[2,60]),o($Vl,[2,61])],
defaultActions: {38:[2,1],131:[2,87]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const controllador = require("./grammarController");
    const declaration = require("../tree/declaracion");
    const asignation = require("../tree/asignacion")
    const exp = require("../tree/expression");
    const iff = require("../tree/if");
    const elsee = require("../tree/else");
    const whilee = require("../tree/while");
    const func_call = require("../tree/function_call");
    const func = require("../tree/function");
    const inst = require("../tree/instruccion");
    const paramsIns = require("../tree/parametersIns");
    const sym = require("../enviroment/sym");
    const returnn = require("../tree/return");
    const listIf = require("../tree/list_if");
    const print = require("../tree/print");
    const do_while = require("../tree/do_while");
    var err;
    var instructionList = controllador.GrammarController.instructionList;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return "COMA";
break;
case 3:return 12;
break;
case 4:return 66;
break;
case 5:return 28;
break;
case 6:return 30;
break;
case 7:return 'CORCHETE_A';
break;
case 8:return 'CORCHETE_C';
break;
case 9:return 8;
break;
case 10:return 9;
break;
case 11:return  'IGUALIGUAL';
break;
case 12:return  'DIFERENTE';
break;
case 13:return  'MENORIGUAL';
break;
case 14:return  'MENOR';
break;
case 15:return  'MAYORIGUAL';
break;
case 16:return  'MAYOR';
break;
case 17:return 31;
break;
case 18:return 27;
break;
case 19:return 32;
break;
case 20:return 33;
break;
case 21:return 34;
break;
case 22:return 35;
break;
case 23:return 54;
break;
case 24:return  'INT';
break;
case 25:return  'DOUBLE';
break;
case 26:return  'BOOL';
break;
case 27:return  'CHAR';
break;
case 28:return  'STRING';
break;
case 29:return  'VOID';
break;
case 30:return  'NEW';
break;
case 31:return  'LIST';
break;
case 32:return 'ADD';
break;
case 33:return 77;
break;
case 34:return 'TOLOWER';
break;
case 35:return 'TOUPER';
break;
case 36:return 'LENGTH';
break;
case 37:return 'TRUNCATE';
break;
case 38:return 'ROUND';
break;
case 39:return 'TYPEOF';
break;
case 40:return 'TOSTRING';
break;
case 41:return 'TOCHARARRAY';
break;
case 42:return 22
break;
case 43:return 59;
break;
case 44:return 60;
break;
case 45:return 61;
break;
case 46:return 67;
break;
case 47:return 65;
break;
case 48:return 25;
break;
case 49:return 26;
break;
case 50:return 23;
break;
case 51:return 56;
break;
case 52:return 55;
break;
case 53:return 57;
break;
case 54:return  'OR';
break;
case 55:return  'AND';
break;
case 56:return  'NOT';
break;
case 57:
break;
case 58:
break;
case 59:return 46;
break;
case 60:return 45;
break;
case 61:return 47;
break;
case 62:return 48
break;
case 63:return 50;
break;
case 64:return 49;
break;
case 65:return 51;
break;
case 66:return 5;
break;
case 67: 
    err = {tipo:"lexico", mensaje:"se recupero en "+yy_.yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
    console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\/)([^\n])*\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(")([^\"\\]|\\.)*("))/i,/^(?:'([^']*)')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-zA-z_]([0-9a-zA-Z_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}