/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,28],$V2=[1,12],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,20],$V7=[1,27],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,18],$Vf=[2,5,8,9,19,45,46,47,49,51,56,57,58,59,60,61,62],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,49],$Vr=[2,5,8,9,19,45,46,47,49,51,52,56,57,58,59,60,61,62],$Vs=[24,45],$Vt=[1,57],$Vu=[1,56],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,66],$VE=[1,67],$VF=[1,68],$VG=[1,69],$VH=[14,21,24,25,26,27,28,29,30,31,33,34,35,36,37,38,55],$VI=[14,24,30,31,55],$VJ=[24,55],$VK=[14,21,24,25,30,31,33,34,35,36,37,38,55],$VL=[14,21,24,25,26,27,29,30,31,33,34,35,36,37,38,55],$VM=[14,24,30,31,33,34,35,36,37,38,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"sentencias":7,"LLAVE_A":8,"LLAVE_C":9,"declaracion_variables":10,"asignacion_variables":11,"actualizacion":12,"print_":13,"P_COMA":14,"else_if":15,"while":16,"function":17,"function_call":18,"RETURN":19,"expression":20,"MENOS":21,"PARENTESIS_A":22,"tipo":23,"PARENTESIS_C":24,"MAS":25,"MULTI":26,"DIVISION":27,"POTENCIA":28,"MODULO":29,"AND":30,"OR":31,"NOT":32,"MAYOR":33,"MENOR":34,"MAYORIGUAL":35,"MENORIGUAL":36,"IGUALIGUAL":37,"DIFERENTE":38,"ENTERO":39,"DECIMAL":40,"CADENA":41,"CARACTER":42,"FALSE":43,"TRUE":44,"IDENTIFICADOR":45,"incremento":46,"decremento":47,"IGUAL":48,"WHILE":49,"if":50,"IF":51,"ELSE":52,"parametros":53,"params_value":54,"COMA":55,"INT":56,"DOUBLE":57,"BOOL":58,"CHAR":59,"STRING":60,"VOID":61,"PRINT":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"LLAVE_A",9:"LLAVE_C",14:"P_COMA",19:"RETURN",21:"MENOS",22:"PARENTESIS_A",24:"PARENTESIS_C",25:"MAS",26:"MULTI",27:"DIVISION",28:"POTENCIA",29:"MODULO",30:"AND",31:"OR",32:"NOT",33:"MAYOR",34:"MENOR",35:"MAYORIGUAL",36:"MENORIGUAL",37:"IGUALIGUAL",38:"DIFERENTE",39:"ENTERO",40:"DECIMAL",41:"CADENA",42:"CARACTER",43:"FALSE",44:"TRUE",45:"IDENTIFICADOR",46:"incremento",47:"decremento",48:"IGUAL",49:"WHILE",51:"IF",52:"ELSE",55:"COMA",56:"INT",57:"DOUBLE",58:"BOOL",59:"CHAR",60:"STRING",61:"VOID",62:"PRINT"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[7,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,3],[6,2],[20,2],[20,4],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[12,1],[12,1],[10,3],[10,5],[11,4],[16,7],[50,7],[50,3],[15,3],[15,1],[17,8],[17,7],[18,3],[18,4],[53,4],[53,2],[54,3],[54,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[13,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
controllador.GrammarController.instructionList = $$[$0-1];
break;
case 2:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 3:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 6:

        err = {tipo:"sintactico", mensaje:"se recupero en "+yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
        
break;
case 7: case 8:
 this.$ = $$[$0] 
break;
case 9:
this.$ = $$[$0] 
break;
case 10: case 14:
this.$ = $$[$0-1]
break;
case 11:
this.$ = new listIf.ListIf(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 12: case 13:
this.$ = $$[$0]
break;
case 15:
this.$ = new returnn.Return($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 16:

        err = {tipo:"sintactico", mensaje:"se recupero en "+yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
         console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
         
break;
case 19:
this.$ = new exp.Expression(exp.Expression_type.SUMA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]); console.log('llega a suma');
break;
case 20:
this.$ = new exp.Expression(exp.Expression_type.RESTA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 21:
this.$ = new exp.Expression(exp.Expression_type.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 22:
this.$ = new exp.Expression(exp.Expression_type.DIVISION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 23:
this.$ = new exp.Expression(exp.Expression_type.POTENCIA, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 24:
this.$ = new exp.Expression(exp.Expression_type.MODULO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 25:
this.$=$$[$0-1]; console.log("llega a parentesis");
break;
case 26:
this.$ = new exp.Expression(exp.Expression_type.AND, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 27:
this.$ = new exp.Expression(exp.Expression_type.OR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 28:
this.$ = new exp.Expression(exp.Expression_type.NOT,_$[$0].first_line,_$[$0].first_column,$$[$0],$$[$0]);
break;
case 29:
this.$ = new exp.Expression(exp.Expression_type.MAYOR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 30:
this.$ = new exp.Expression(exp.Expression_type.MENOR, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 31:
this.$ = new exp.Expression(exp.Expression_type.MAYORIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 32:
this.$ = new exp.Expression(exp.Expression_type.MENORIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 33:
this.$ = new exp.Expression(exp.Expression_type.IGUALIGUAL, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 34:
this.$ = new exp.Expression(exp.Expression_type.DIFERENTE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0]);
break;
case 37:
this.$ = new exp.Expression(exp.Expression_type.ENTERO,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 38:
this.$ = new exp.Expression(exp.Expression_type.DECIMAL,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 39:
this.$ = new exp.Expression(exp.Expression_type.CADENA,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 40:
this.$ = new exp.Expression(exp.Expression_type.CHAR,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 41: case 42:
this.$ = new exp.Expression(exp.Expression_type.BOOLEAN,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 43:
this.$ = new exp.Expression(exp.Expression_type.IDENTIFICADOR,this._$.first_line,this._$.first_column,null,null,$$[$0]);
break;
case 44:
this.$ = new exp.Expression(exp.Expression_type.FUNCION,this._$.first_line,this._$.first_column,null,null,$$[$0].id,$$[$0].parametersExpressions);
break;
case 47:
this.$ = new declaration.Declaration($$[$0-1],$$[$0-2],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$ = new declaration.Declaration($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 49:
this.$ = new asignation.Asignation($$[$0-3],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 50:
 this.$ = new whilee.While($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 51:
this.$ = new iff.If($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column) ;
break;
case 52:
this.$ = new elsee.Else($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 53: case 61:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 54:

        this.$ =[];
        this.$.push($$[$0]);
    
break;
case 55:
this.$ = new func.Function($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 56:
this.$ = new func.Function($$[$0-5],$$[$0-6],$$[$0-1],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 57:
this.$ = new func_call.FunctionCall($$[$0-2],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58:
this.$ = new func_call.FunctionCall($$[$0-3],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 59:

        this.$ = $$[$0-3];
        this.$.push(new declaration.Declaration($$[$0],$$[$0-1],null,_$[$0-2].first_line,_$[$0-2].first_column));
    
break;
case 60:

        this.$ = [];
        this.$.push(new declaration.Declaration($$[$0],$$[$0-1],null,_$[$0].first_line,_$[$0].first_column));
    
break;
case 62:

        this.$ = [];
        this.$.push($$[$0]);
    
break;
case 63:
this.$ = sym.EnumType.int;
break;
case 64:
this.$ = sym.EnumType.double;
break;
case 65:
this.$ = sym.EnumType.boolean;
break;
case 66:
this.$ = sym.EnumType.char;
break;
case 67:
this.$ = sym.EnumType.string;
break;
case 68:
this.$ = sym.EnumType.void
break;
case 69:
this.$ = new print.Print($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{1:[3]},{2:$V0,5:[1,29],6:30,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},o($Vf,[2,3]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),{14:[1,31]},o($Vf,[2,11],{52:[1,32]}),o($Vf,[2,12]),o($Vf,[2,13]),{14:[1,33]},{18:45,20:34,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{14:[1,46]},{45:[1,47]},{22:$Vq,48:[1,48]},o($Vf,[2,45]),o($Vf,[2,46]),{22:[1,50]},o($Vr,[2,54]),{22:[1,51]},o($Vs,[2,63]),o($Vs,[2,64]),o($Vs,[2,65]),o($Vs,[2,66]),o($Vs,[2,67]),o($Vs,[2,68]),{22:[1,52]},{2:$V0,4:53,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,10]),{8:$V1,50:54,51:$V7},o($Vf,[2,14]),{14:[1,55],21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},{18:45,20:70,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:72,21:$Vg,22:$Vh,23:71,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd},{18:45,20:73,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43],{22:$Vq}),o($VH,[2,44]),o($Vf,[2,16]),{14:[1,74],22:[1,76],48:[1,75]},{18:45,20:77,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:80,21:$Vg,22:$Vh,24:[1,78],32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,54:79},{18:45,20:81,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:82,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:83,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{2:$V0,6:30,8:$V1,9:[1,84],10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},o($Vr,[2,53]),o($Vf,[2,15]),{18:45,20:85,21:$Vg,22:$Vh,25:[1,86],32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:87,21:[1,88],22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:89,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:90,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:91,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:92,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:93,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:94,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:95,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:96,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:97,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:98,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:99,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{18:45,20:100,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},o($VH,[2,17]),{24:[1,101]},{21:$Vt,24:[1,102],25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},o($VI,[2,28],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG}),o($Vf,[2,47]),{18:45,20:103,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{23:106,24:[1,105],53:104,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd},{14:[1,107],21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},o($VH,[2,57]),{24:[1,108],55:[1,109]},o($VJ,[2,62],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG}),{21:$Vt,24:[1,110],25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},{21:$Vt,24:[1,111],25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},{21:$Vt,24:[1,112],25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},o($Vr,[2,52]),o($VK,[2,19],{26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VH,[2,35]),o($VK,[2,20],{26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VH,[2,36],{18:45,20:70,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp}),o($VL,[2,21],{28:$Vx}),o($VL,[2,22],{28:$Vx}),o($VH,[2,23]),o($VL,[2,24],{28:$Vx}),o($VI,[2,26],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG}),o([14,24,31,55],[2,27],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG}),o($VM,[2,29],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VM,[2,30],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VM,[2,31],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VM,[2,32],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VM,[2,33],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),o($VM,[2,34],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy}),{18:45,20:113,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},o($VH,[2,25]),{14:[1,114],21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG},{24:[1,115],55:[1,116]},{8:[1,117]},{45:[1,118]},o($Vf,[2,49]),o($VH,[2,58]),{18:45,20:119,21:$Vg,22:$Vh,32:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp},{14:[2,69]},{8:[1,120]},{8:[1,121]},o($VH,[2,18]),o($Vf,[2,48]),{8:[1,122]},{23:123,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd},{2:$V0,4:124,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},o($VJ,[2,60]),o($VJ,[2,61],{21:$Vt,25:$Vu,26:$Vv,27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,33:$VB,34:$VC,35:$VD,36:$VE,37:$VF,38:$VG}),{2:$V0,4:125,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{2:$V0,4:126,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{2:$V0,4:127,6:3,8:$V1,10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{45:[1,128]},{2:$V0,6:30,8:$V1,9:[1,129],10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{2:$V0,6:30,8:$V1,9:[1,130],10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{2:$V0,6:30,8:$V1,9:[1,131],10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},{2:$V0,6:30,8:$V1,9:[1,132],10:4,11:5,12:6,13:7,15:8,16:9,17:10,18:11,19:$V2,23:14,45:$V3,46:$V4,47:$V5,49:$V6,50:19,51:$V7,56:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve},o($VJ,[2,59]),o($Vf,[2,56]),o($Vf,[2,50]),o($Vr,[2,51]),o($Vf,[2,55])],
defaultActions: {29:[2,1],110:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const controllador = require("./grammarController");
    const declaration = require("../tree/declaracion");
    const asignation = require("../tree/asignacion")
    const exp = require("../tree/expression");
    const iff = require("../tree/if");
    const elsee = require("../tree/else");
    const whilee = require("../tree/while");
    const func_call = require("../tree/function_call");
    const func = require("../tree/function");
    const inst = require("../tree/instruccion");
    const paramsIns = require("../tree/parametersIns");
    const sym = require("../enviroment/sym");
    const returnn = require("../tree/return");
    const listIf = require("../tree/list_if");
    const print = require("../tree/print");
    var err;
    var instructionList = controllador.GrammarController.instructionList;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "COMA";
break;
case 1:return 14;
break;
case 2:return 'DOSPUNTOS';
break;
case 3:return 22;
break;
case 4:return 24;
break;
case 5:return 'CORCHETE_A';
break;
case 6:return 'CORCHETE_C';
break;
case 7:return 8;
break;
case 8:return 9;
break;
case 9:return  'IGUALIGUAL';
break;
case 10:return  'DIFERENTE';
break;
case 11:return  'MENORIGUAL';
break;
case 12:return  'MENOR';
break;
case 13:return  'MAYORIGUAL';
break;
case 14:return  'MAYOR';
break;
case 15:return 25;
break;
case 16:return 21;
break;
case 17:return 26;
break;
case 18:return 27;
break;
case 19:return 28;
break;
case 20:return 29;
break;
case 21:return 48;
break;
case 22:return  'INT';
break;
case 23:return  'DOUBLE';
break;
case 24:return  'BOOL';
break;
case 25:return  'CHAR';
break;
case 26:return  'STRING';
break;
case 27:return  'VOID';
break;
case 28:return  'NEW';
break;
case 29:return  'LIST';
break;
case 30:return 'ADD';
break;
case 31:return 62;
break;
case 32:return 'TOLOWER';
break;
case 33:return 'TOUPER';
break;
case 34:return 'LENGTH';
break;
case 35:return 'TRUNCATE';
break;
case 36:return 'ROUND';
break;
case 37:return 'TYPEOF';
break;
case 38:return 'TOSTRING';
break;
case 39:return 'TOCHARARRAY';
break;
case 40:return 'EXEC'
break;
case 41:return 51;
break;
case 42:return 52;
break;
case 43:return 'SWITCH';
break;
case 44:return 'CASE';
break;
case 45:return 'DEFAULT';
break;
case 46:return 'BREAK';
break;
case 47:return 'CONTINUE';
break;
case 48:return 19;
break;
case 49:return 'DO';
break;
case 50:return 49;
break;
case 51:return 'FOR';
break;
case 52:return  'OR';
break;
case 53:return  'AND';
break;
case 54:return  'NOT';
break;
case 55:
break;
case 56:
break;
case 57:return 40;
break;
case 58:return 39;
break;
case 59:return 41;
break;
case 60:return 42
break;
case 61:return 44;
break;
case 62:return 43;
break;
case 63:return 45;
break;
case 64:return 5;
break;
case 65: 
    err = {tipo:"lexico", mensaje:"se recupero en "+yy_.yytext, linea:this._$.first_line, columna:this._$.first_column};
        controllador.GrammarController.errores.push(err);
    console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(")([^\"\\]|\\.)*("))/i,/^(?:'([^']*)')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-zA-z_]([0-9a-zA-z_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}